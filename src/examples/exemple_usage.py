#!/usr/bin/env python3
"""
Exemple d'utilisation du client MQTT IoT Sensors UCUM
Simule des capteurs envoyant des donn√©es p√©riodiquement
"""

import sys
import os
import asyncio
import json
import random
from datetime import datetime

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from iot_sensors_mcp import create_mqtt_client


class SensorSimulator:
    """Simulateur de capteurs IoT"""
    
    def __init__(self, mqtt_client):
        self.client = mqtt_client
        self.sensors = {
            "temp_bureau": {"type": "temperature", "unit": "Cel", "base": 22.0, "variation": 3.0},
            "temp_exterieur": {"type": "temperature", "unit": "Cel", "base": 15.0, "variation": 8.0},
            "hum_bureau": {"type": "humidity", "unit": "%", "base": 45.0, "variation": 15.0},
            "pression_ext": {"type": "pressure", "unit": "hPa", "base": 1013.25, "variation": 20.0},
        }
        
    def generate_value(self, sensor_config):
        """G√©n√©rer une valeur al√©atoire pour un capteur"""
        base = sensor_config["base"]
        variation = sensor_config["variation"]
        # Valeur avec variation al√©atoire
        value = base + random.uniform(-variation/2, variation/2)
        return round(value, 2)
    
    async def publish_sensor_reading(self, sensor_id, config):
        """Publier une lecture de capteur"""
        value = self.generate_value(config)
        topic = f"iot/sensors/{config['type']}/{sensor_id}"
        
        # Donn√©es suppl√©mentaires
        additional_data = {
            "location": "Bureau Dominique" if "bureau" in sensor_id else "Ext√©rieur",
            "battery_level": random.randint(80, 100),
            "signal_strength": random.randint(-60, -30)
        }
        
        success = await self.client.publish_sensor_data(
            topic=topic,
            sensor_id=sensor_id,
            value=value,
            unit=config["unit"],
            additional_data=additional_data
        )
        
        if success:
            print(f"üìä {sensor_id}: {value} {config['unit']} ‚Üí {topic}")
        else:
            print(f"‚ùå √âchec publication {sensor_id}")
        
        return success
    
    async def run_simulation(self, duration_minutes=5, interval_seconds=10):
        """Lancer la simulation pendant une dur√©e donn√©e"""
        print(f"üöÄ D√©marrage simulation ({duration_minutes} min, intervalle {interval_seconds}s)")
        print(f"üì° Capteurs: {list(self.sensors.keys())}")
        print("" + "="*60)
        
        end_time = asyncio.get_event_loop().time() + (duration_minutes * 60)
        
        while asyncio.get_event_loop().time() < end_time:
            print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} - Cycle de mesures")
            
            # Publier toutes les mesures
            tasks = []
            for sensor_id, config in self.sensors.items():
                task = self.publish_sensor_reading(sensor_id, config)
                tasks.append(task)
            
            # Attendre que toutes les publications soient termin√©es
            results = await asyncio.gather(*tasks)
            success_count = sum(results)
            
            print(f"‚úÖ {success_count}/{len(self.sensors)} capteurs publi√©s")
            
            # Attendre le prochain cycle
            await asyncio.sleep(interval_seconds)
        
        print(f"\nüèÅ Simulation termin√©e apr√®s {duration_minutes} minutes")


async def demo_basic():
    """D√©monstration basique"""
    print("üß™ D√©monstration IoT Sensors UCUM")
    print("================================\n")
    
    # Cr√©er le client MQTT
    client = create_mqtt_client(client_id="demo_iot_sensors")
    
    try:
        # Connexion
        print("üîó Connexion au broker MQTT...")
        connected = await client.connect()
        
        if not connected:
            print("‚ùå Impossible de se connecter √† MQTT")
            print("üí° Assurez-vous que Mosquitto est d√©marr√©:")
            print("   brew install mosquitto")
            print("   brew services start mosquitto")
            return
        
        print("‚úÖ Connexion MQTT √©tablie!")
        
        # S'abonner aux topics de capteurs
        await client.subscribe("iot/sensors/#")
        print("‚úÖ Abonn√© aux topics iot/sensors/#")
        
        # Publier quelques mesures manuelles
        print("\nüìä Publication de mesures de test...")
        
        test_readings = [
            {"topic": "iot/sensors/temperature/test_temp", "sensor_id": "test_temp", "value": 23.5, "unit": "Cel"},
            {"topic": "iot/sensors/humidity/test_hum", "sensor_id": "test_hum", "value": 65.2, "unit": "%"},
            {"topic": "iot/sensors/pressure/test_press", "sensor_id": "test_press", "value": 1013.25, "unit": "hPa"},
        ]
        
        for reading in test_readings:
            await client.publish_sensor_data(**reading)
            await asyncio.sleep(0.5)
        
        # Attendre un peu pour recevoir les messages
        print("\n‚è≥ Attente des messages (3 secondes)...")
        await asyncio.sleep(3)
        
        # Afficher l'historique
        print("\nüìú Historique des messages re√ßus:")
        all_topics = client.get_all_topics()
        
        if all_topics:
            for topic in sorted(all_topics):
                history = client.get_message_history(topic, limit=5)
                print(f"\nüîñ {topic}:")
                for msg in history:
                    if msg.sensor_id and msg.value and msg.unit:
                        print(f"   ‚Ä¢ {msg.sensor_id}: {msg.value} {msg.unit} [{msg.timestamp.strftime('%H:%M:%S')}]")
                    else:
                        print(f"   ‚Ä¢ {msg.payload[:50]}... [{msg.timestamp.strftime('%H:%M:%S')}]")
        else:
            print("üì≠ Aucun message re√ßu")
        
        # Afficher le statut
        status = client.get_status()
        print(f"\nüìä Statut final:")
        print(f"   Topics abonn√©s: {status['subscribed_topics']}")
        print(f"   Messages stock√©s: {status['total_messages_stored']}")
        
    finally:
        await client.disconnect()
        print("\nüëã D√©connexion MQTT")


async def demo_simulation():
    """D√©monstration avec simulation de capteurs"""
    print("üè≠ Simulation de capteurs IoT")
    print("============================\n")
    
    client = create_mqtt_client(client_id="simulator_iot_sensors")
    
    try:
        connected = await client.connect()
        if not connected:
            print("‚ùå Connexion MQTT impossible")
            return
        
        print("‚úÖ Connexion √©tablie")
        
        # S'abonner pour voir tous les messages
        await client.subscribe("iot/sensors/#")
        
        # Cr√©er et lancer le simulateur
        simulator = SensorSimulator(client)
        await simulator.run_simulation(duration_minutes=2, interval_seconds=5)
        
        # R√©sum√© final
        print("\nüìà R√©sum√© de la simulation:")
        all_topics = client.get_all_topics()
        for topic in sorted(all_topics):
            count = len(client.get_message_history(topic))
            print(f"   {topic}: {count} messages")
        
    finally:
        await client.disconnect()


async def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Exemple IoT Sensors UCUM")
    parser.add_argument("--simulation", action="store_true", help="Lancer la simulation de capteurs")
    parser.add_argument("--duration", type=int, default=2, help="Dur√©e simulation en minutes")
    
    args = parser.parse_args()
    
    if args.simulation:
        # Modifier la dur√©e si sp√©cifi√©e
        original_duration = 2
        SensorSimulator.run_simulation.__defaults__ = (args.duration, 5)
        await demo_simulation()
    else:
        await demo_basic()
    
    print("\nüéâ D√©monstration termin√©e!")
    print("\nüí° Essayez aussi:")
    print("   python3 exemple_usage.py --simulation")
    print("   python3 exemple_usage.py --simulation --duration 5")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
