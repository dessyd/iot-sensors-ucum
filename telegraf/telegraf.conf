[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
  debug = true

# =====================================
# COLLECTE SÉLECTIVE - Seulement les mesures de capteurs
# =====================================
[[inputs.mqtt_consumer]]
  servers = ["tcp://192.168.1.15:1883"]
  topics = ["sensors/+/temperature", "sensors/+/humidity", "sensors/+/pressure", "sensors/+/illuminance"]
  data_format = "json"
  
  # Champs string pour le format v2.0
  json_string_fields = ["u", "t"]
  
  # Extraction device_id et sensor_type depuis le topic
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "sensors/+/+"
    tags = "sensors/device_id/sensor_type"

# Plugin d'entrée pour InfluxDB v1 (capteur feinstaub)
[[inputs.influxdb_listener]]
  service_address = ":8086"  # Port d'écoute pour les données InfluxDB v1
  write_timeout = "5s"
  read_timeout = "5s"
  data_format = "influx"

# =====================================
# PROCESSORS - CORRECTION du renommage Arduino
# =====================================

# Renommage des champs Arduino - ORDRE IMPORTANT
[[processors.rename]]
  namepass = ["mqtt_consumer"]
  [[processors.rename.replace]]
    field = "v"
    dest = "value"
  [[processors.rename.replace]]
    field = "u" 
    dest = "ucum_code"
  [[processors.rename.replace]]
    field = "t"
    dest = "sensor_timestamp"

# Ajout des métadonnées UCUM pour les mesures Arduino
[[processors.enum]]
  namepass = ["mqtt_consumer"]
  [[processors.enum.mapping]]
    field = "ucum_code"
    dest = "si_base_unit"
    [processors.enum.mapping.value_mappings]
      "Cel" = "K"              # Celsius -> Kelvin (SI)
      "[degF]" = "K"           # Fahrenheit -> Kelvin (SI)  
      "K" = "K"                # Kelvin (déjà SI)
      "hPa" = "Pa"             # hectoPascal -> Pascal (SI)
      "kPa" = "Pa"             # kiloPascal -> Pascal (SI)
      "bar" = "Pa"             # bar -> Pascal (SI)
      "lx" = "lx"              # lux (déjà SI)
      "%" = "1"                # pourcentage -> sans dimension

# =====================================
# PROCESSORS FEINSTAUB - Transformation vers structure unifiée
# =====================================

[[processors.starlark]]
  namepass = ["feinstaub"]
  source = '''
def apply(metric):
    new_metrics = []
    node_id = metric.tags.get("node", "unknown_feinstaub")
    
    # Convertir le timestamp en string pour correspondre au format Arduino
    timestamp_str = str(metric.time).replace("T", " ").replace("Z", "")
    
    # Température : feinstaub.temperature -> mqtt_consumer avec sensor_type=temperature
    if "temperature" in metric.fields:
        temp_metric = Metric("mqtt_consumer")
        # Copier tous les tags existants
        for tag_key, tag_value in metric.tags.items():
            temp_metric.tags[tag_key] = tag_value
        # Ajouter les tags spécifiques
        temp_metric.tags["device_id"] = node_id
        temp_metric.tags["sensor_type"] = "temperature"
        temp_metric.tags["sensors"] = "sensors"
        temp_metric.tags["topic"] = "sensors/" + node_id + "/temperature"
        # Ajouter les champs
        temp_metric.fields["value"] = metric.fields["temperature"]
        temp_metric.fields["ucum_code"] = "Cel"
        temp_metric.fields["si_base_unit"] = "K"
        temp_metric.fields["sensor_timestamp"] = timestamp_str
        temp_metric.time = metric.time
        new_metrics.append(temp_metric)
    
    # Humidité : feinstaub.humidity -> mqtt_consumer avec sensor_type=humidity
    if "humidity" in metric.fields:
        hum_metric = Metric("mqtt_consumer")
        # Copier tous les tags existants
        for tag_key, tag_value in metric.tags.items():
            hum_metric.tags[tag_key] = tag_value
        # Ajouter les tags spécifiques
        hum_metric.tags["device_id"] = node_id
        hum_metric.tags["sensor_type"] = "humidity"
        hum_metric.tags["sensors"] = "sensors"
        hum_metric.tags["topic"] = "sensors/" + node_id + "/humidity"
        # Ajouter les champs
        hum_metric.fields["value"] = metric.fields["humidity"]
        hum_metric.fields["ucum_code"] = "%"
        hum_metric.fields["si_base_unit"] = "1"
        hum_metric.fields["sensor_timestamp"] = timestamp_str
        hum_metric.time = metric.time
        new_metrics.append(hum_metric)
    
    # PM10 : feinstaub.SDS_P1 -> mqtt_consumer avec sensor_type=pm10
    if "SDS_P1" in metric.fields:
        pm10_metric = Metric("mqtt_consumer")
        # Copier tous les tags existants
        for tag_key, tag_value in metric.tags.items():
            pm10_metric.tags[tag_key] = tag_value
        # Ajouter les tags spécifiques
        pm10_metric.tags["device_id"] = node_id
        pm10_metric.tags["sensor_type"] = "pm10"
        pm10_metric.tags["sensors"] = "sensors"
        pm10_metric.tags["topic"] = "sensors/" + node_id + "/pm10"
        # Ajouter les champs
        pm10_metric.fields["value"] = metric.fields["SDS_P1"]
        pm10_metric.fields["ucum_code"] = "ug/m3"
        pm10_metric.fields["si_base_unit"] = "kg/m3"
        pm10_metric.fields["sensor_timestamp"] = timestamp_str
        pm10_metric.time = metric.time
        new_metrics.append(pm10_metric)
    
    # PM2.5 : feinstaub.SDS_P2 -> mqtt_consumer avec sensor_type=pm25
    if "SDS_P2" in metric.fields:
        pm25_metric = Metric("mqtt_consumer")
        # Copier tous les tags existants
        for tag_key, tag_value in metric.tags.items():
            pm25_metric.tags[tag_key] = tag_value
        # Ajouter les tags spécifiques
        pm25_metric.tags["device_id"] = node_id
        pm25_metric.tags["sensor_type"] = "pm25"
        pm25_metric.tags["sensors"] = "sensors"
        pm25_metric.tags["topic"] = "sensors/" + node_id + "/pm25"
        # Ajouter les champs
        pm25_metric.fields["value"] = metric.fields["SDS_P2"]
        pm25_metric.fields["ucum_code"] = "ug/m3"
        pm25_metric.fields["si_base_unit"] = "kg/m3"
        pm25_metric.fields["sensor_timestamp"] = timestamp_str
        pm25_metric.time = metric.time
        new_metrics.append(pm25_metric)
    
    return new_metrics
'''

# =====================================
# SORTIE INFLUXDB
# =====================================
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "MyInitialAdminToken0=="
  organization = "iot-sensors"
  bucket = "sensor-data"
  
  timeout = "5s"
  user_agent = "telegraf-iot-sensors-v2-unified-fixed"