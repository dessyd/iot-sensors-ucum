[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# Collecte MQTT avec support UCUM
[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]
  topics = ["sensors/+/+"]
  username = "mqtt_user"
  password = "mqtt_password"
  data_format = "json"
  
  # Champs qui restent en string - support UCUM
  json_string_fields = [
    "device_id", 
    "sensor_type", 
    "location", 
    "measurement_type",
    "ucum.code",
    "ucum.display", 
    "ucum.common_name",
    "ucum.quantity_type"
  ]
  
  # Tags pour indexation rapide - avec UCUM
  tag_keys = [
    "device_id", 
    "sensor_type", 
    "location",
    "ucum.code",
    "ucum.quantity_type"
  ]

# Processor pour enrichir avec métadonnées UCUM
[[processors.enum]]
  [[processors.enum.mapping]]
    tag = "ucum.code"
    dest = "si_base_unit"
    [processors.enum.mapping.value_mappings]
      "Cel" = "K"              # Celsius -> Kelvin (SI)
      "[degF]" = "K"           # Fahrenheit -> Kelvin (SI)  
      "K" = "K"                # Kelvin (déjà SI)
      "hPa" = "Pa"             # hectoPascal -> Pascal (SI)
      "kPa" = "Pa"             # kiloPascal -> Pascal (SI)
      "bar" = "Pa"             # bar -> Pascal (SI)
      "lx" = "lx"              # lux (déjà SI)
      "%" = "1"                # pourcentage -> sans dimension

# Processor de conversion vers unités SI
[[processors.converter]]
  [processors.converter.fields]
    value = "float"

# Processor pour calculer les valeurs SI via script Starlark
[[processors.starlark]]
  script = '''
def apply(metric):
    ucum_code = metric.tags.get("ucum.code", "")
    value = metric.fields.get("value", 0.0)
    
    # Conversions vers unités SI
    if ucum_code == "Cel":
        # Celsius vers Kelvin
        metric.fields["value_si"] = value + 273.15
        metric.tags["si_unit"] = "K"
    elif ucum_code == "[degF]":
        # Fahrenheit vers Kelvin
        metric.fields["value_si"] = (value - 32) * 5/9 + 273.15
        metric.tags["si_unit"] = "K"
    elif ucum_code == "hPa":
        # hectoPascal vers Pascal
        metric.fields["value_si"] = value * 100
        metric.tags["si_unit"] = "Pa"
    elif ucum_code == "kPa":
        # kiloPascal vers Pascal  
        metric.fields["value_si"] = value * 1000
        metric.tags["si_unit"] = "Pa"
    else:
        # Déjà en unité SI ou sans conversion
        metric.fields["value_si"] = value
        metric.tags["si_unit"] = ucum_code
    
    return metric
'''

# Sortie vers InfluxDB avec préservation UCUM
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "my-super-secret-auth-token"
  organization = "iot-sensors"
  bucket = "sensor-data"
  
  # Configuration supplémentaire
  timeout = "5s"
  user_agent = "telegraf-iot-sensors-ucum"
